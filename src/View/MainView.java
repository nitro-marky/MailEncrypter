/*
 * Mail Encrypter Created by 13012555  
 *   
 */
package View;

import Command.ICommand;
import Command.IEmailCommand;
import Controller.IEmailStrategy;
import Controller.IEncryptionStrategy;
import Controller.IKeyStrategy;
import Controller.IStrategy;
import Exceptions.InvalidDecryptionError;
import Exceptions.KeyFileException;
import Exceptions.MailException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * The MainView is where the majority of the user interaction occurs.
 */
public class MainView extends javax.swing.JFrame implements  IEncryptionObserver, IEmailObserver {

    //Strategies used for for email, encryption and key functions in order to pass data.
    private IEncryptionStrategy _encryptionStrategy;
    private IEmailStrategy _emailStrategy;
    private IKeyStrategy _keyStrategy;
    
    //Commands for actions which require no data to be passed.
    private ICommand _openEmailDetails;
    private ICommand _generateKeyCommand;
    private IEmailCommand _checkMailCommand;
    
    DefaultListModel _list = new DefaultListModel();
           
      
    /**
     * Constructor for the MainView. Assigns the strategies and performs intial 
     * setup.
     * @param encryption - The IStrategy to be assigned.
     */
    public MainView(IStrategy encryption) 
    {
        initComponents();
        
        //Sets the strategies which is passed through the constructor.
        _encryptionStrategy = (IEncryptionStrategy)encryption;
        _emailStrategy = (IEmailStrategy)encryption;
        _keyStrategy = (IKeyStrategy)encryption;     
        
        _emailList.setModel(_list);
        
        //Some functions are disabled when the program starts. They can be enabled through interaction.
       _encryptButton.setEnabled(false);
       _decryptButton.setEnabled(false);
       _checkEmailButton.setEnabled(false);
       _deleteEmailButton.setEnabled(false);
       _saveButton.setEnabled(false);
       _sendButton.setEnabled(false);
       _keySelector.setEnabled(false);
       
    }

    
    /**
     * 
     * Switch statement assigns the commands to the correct field.
     *
     * @param command - ICommand to be assigned.
     * @param id - The ID for the passed command.
     */
    public void setCommand(ICommand command, int id)
    {
        switch(id)
        {
            case 0:  _openEmailDetails = command;
                break;
            case 1: _generateKeyCommand = command;
                break;
            case 2: _checkMailCommand = (IEmailCommand)command;
                break;
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        _messageArea = new javax.swing.JTextArea();
        _sendButton = new javax.swing.JButton();
        _encryptButton = new javax.swing.JButton();
        _decryptButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        _keySelector = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        _saveButton = new javax.swing.JButton();
        _loadButton = new javax.swing.JButton();
        _generateKeyButton = new javax.swing.JButton();
        _toArea = new javax.swing.JTextField();
        _subjectArea = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        _emailList = new javax.swing.JList();
        _checkEmailButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        _fromField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        _dateField = new javax.swing.JTextField();
        _clearFieldButton = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        _keyNameField = new javax.swing.JTextField();
        _deleteEmailButton = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        _connectionStatus = new javax.swing.JTextField();
        jCheckBox1 = new javax.swing.JCheckBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        _funButton = new javax.swing.JMenu();
        _emailAccountButton = new javax.swing.JMenu();
        _aboutDialog = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        _messageArea.setColumns(20);
        _messageArea.setLineWrap(true);
        _messageArea.setRows(5);
        jScrollPane2.setViewportView(_messageArea);

        _sendButton.setText("Send");
        _sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _sendButtonActionPerformed(evt);
            }
        });

        _encryptButton.setText("Encrypt");
        _encryptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _encryptButtonActionPerformed(evt);
            }
        });

        _decryptButton.setText("Decrypt");
        _decryptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _decryptButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Received Encrypted Messages");

        _keySelector.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Key 1", "Key 2", "Key 3", "Key 4", "Key 5" }));

        jLabel2.setText("Choose the Encryption Key");

        _saveButton.setText("Save Keys");
        _saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _saveButtonActionPerformed(evt);
            }
        });

        _loadButton.setText("Load Keys");
        _loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _loadButtonActionPerformed(evt);
            }
        });

        _generateKeyButton.setText("Generate New Keys");
        _generateKeyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _generateKeyButtonActionPerformed(evt);
            }
        });

        _toArea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _toAreaActionPerformed(evt);
            }
        });

        jLabel3.setText("To");

        jLabel4.setText("Subject");

        _emailList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        _emailList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                _emailListMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(_emailList);

        _checkEmailButton.setText("Check Emails");
        _checkEmailButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _checkEmailButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("From");

        _fromField.setEditable(false);

        jLabel7.setText("Date");

        _dateField.setEditable(false);

        _clearFieldButton.setText("Clear Fields");
        _clearFieldButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _clearFieldButtonActionPerformed(evt);
            }
        });

        jLabel8.setText("Current Key Set");

        _keyNameField.setEditable(false);
        _keyNameField.setText("No Keys Selected");

        _deleteEmailButton.setText("Delete");
        _deleteEmailButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _deleteEmailButtonActionPerformed(evt);
            }
        });

        jLabel9.setText("Connection Status");

        _connectionStatus.setEditable(false);
        _connectionStatus.setText("Not Connected");

        jCheckBox1.setSelected(true);
        jCheckBox1.setText("Include Key ID In Subject");

        _funButton.setText("File");
        _funButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        _funButton.setPreferredSize(new java.awt.Dimension(100, 24));
        _funButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                _funButtonMouseClicked(evt);
            }
        });
        jMenuBar1.add(_funButton);

        _emailAccountButton.setText("Email Account");
        _emailAccountButton.setPreferredSize(new java.awt.Dimension(150, 24));
        _emailAccountButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                _emailAccountButtonMouseClicked(evt);
            }
        });
        jMenuBar1.add(_emailAccountButton);

        _aboutDialog.setText("About");
        _aboutDialog.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                _aboutDialogMouseClicked(evt);
            }
        });
        jMenuBar1.add(_aboutDialog);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(_sendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(65, 65, 65)
                        .addComponent(_encryptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(_decryptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(44, 44, 44))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel6)
                                            .addComponent(jLabel7))
                                        .addGap(31, 31, 31)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(_fromField)
                                    .addComponent(_toArea)
                                    .addComponent(_dateField, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCheckBox1)
                                    .addComponent(_subjectArea, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(129, 129, 129)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(_checkEmailButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(_clearFieldButton, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                            .addComponent(_deleteEmailButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 653, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(55, 55, 55)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(_saveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(_loadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel9)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(_connectionStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(_generateKeyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(_keySelector, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(_keyNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addComponent(jLabel1)))
                .addContainerGap(55, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(34, 34, 34)
                                .addComponent(_checkEmailButton, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(_deleteEmailButton)
                                .addGap(18, 18, 18)
                                .addComponent(_clearFieldButton)
                                .addGap(31, 31, 31))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(_toArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel6)
                                    .addComponent(_fromField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(17, 17, 17)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel7)
                                    .addComponent(_dateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(_subjectArea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jCheckBox1)
                                .addGap(3, 3, 3)))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(_keyNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(_keySelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(_saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(_loadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(_generateKeyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(_encryptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(_sendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(_decryptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel9)
                        .addComponent(_connectionStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * 
     * Called when the encrypt button is clicked. Passes the message text and key id via the encryption strategy. 
     */
    private void _encryptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__encryptButtonActionPerformed
        
        String text = _messageArea.getText();
        int _keyID = _keySelector.getSelectedIndex();
        _encryptionStrategy.Encrypt(text, _keyID);
        
    }//GEN-LAST:event__encryptButtonActionPerformed

    /**
     * 
     * Called when the decrypt button is clicked. The encrypted message and key id is passed via the encryption strategy.
     * Displays an error if an InvalidDecryptionError is caught.
     */
    private void _decryptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__decryptButtonActionPerformed

        try
        {
            String text = _messageArea.getText();
            int _keyID = _keySelector.getSelectedIndex();
            _encryptionStrategy.Decrypt(text, _keyID);
        }
        catch(InvalidDecryptionError e)
        {
            switch(e.getMessage())
            {
                case "INCORRECT_KEY": JOptionPane.showMessageDialog(null,"Incorrect Encryption Key Selected.","Error",JOptionPane.WARNING_MESSAGE); break;
                
                case "INCORRECT_MESSAGE" :JOptionPane.showMessageDialog(null,"Message Cannot Be Decrypted.","Error",JOptionPane.WARNING_MESSAGE); break;    
            }
        }
        
    }//GEN-LAST:event__decryptButtonActionPerformed

    
    /**
     * 
     * When save is clicked a new JFileChooser is created which gets the file and path name of the desired save file. 
     */
    private void _saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__saveButtonActionPerformed

        JFileChooser _saveFile = new JFileChooser();
        int num = _saveFile.showSaveDialog(this);
        if(num == _saveFile.APPROVE_OPTION)
        {
            _keyStrategy.saveKeys(_saveFile.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event__saveButtonActionPerformed

    
    /**
     * 
     * Works in the same way as the save function. Catches a KeyFileException in the case of an error and 
     * displays it to the user.
     */
    private void _loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__loadButtonActionPerformed

        try{
        JFileChooser _saveFile = new JFileChooser();
        int num = _saveFile.showOpenDialog(this);
        if(num == _saveFile.APPROVE_OPTION)
        {
            _keyStrategy.loadKeys(_saveFile.getSelectedFile().getAbsolutePath());
        }
        }
        catch(KeyFileException e)
        {
            switch(e.getMessage())
            {
                case "LOAD_ERROR": JOptionPane.showMessageDialog(null,"Invalid File.","Error",JOptionPane.WARNING_MESSAGE); break;
            }
        }
    }//GEN-LAST:event__loadButtonActionPerformed

    
    /**
     * 
     * Calls on the key command to generate a new set of keys. 
     */
    private void _generateKeyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__generateKeyButtonActionPerformed
              
        try {
            _generateKeyCommand.Execute();
        } catch (Exception ex) {
            Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
        }
  
    }//GEN-LAST:event__generateKeyButtonActionPerformed

    
    /**
     * 
     *  Uses the email details command to open the email view.
     */
    private void _emailAccountButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event__emailAccountButtonMouseClicked
       
        try {
            _openEmailDetails.Execute();
        } catch (Exception ex) {
            Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
        }
 
    }//GEN-LAST:event__emailAccountButtonMouseClicked

    
    /**
     * 
     * Sends the message, subject, recipient and key id to be sent through the email strategy. The user can choose whether to send
     * the key id or not through the checkbox. Catches a MailException in the event of a send failure and displays
     * a warning.
     */
    private void _sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__sendButtonActionPerformed
        
        String _keyString;
        if(jCheckBox1.isSelected())
        {
            int _keyNUM = _keySelector.getSelectedIndex() + 1;
            _keyString = String.valueOf(_keyNUM);
        }
        else
        {
            _keyString = "Not Specified";
        }
        try{
        _emailStrategy.sendEmail(_toArea.getText(), _messageArea.getText(), _subjectArea.getText(), _keyString );
        }
        catch(MailException e)
        {
            switch(e.getMessage())
            {
                case "INVALID_MAIL_DETAILS": JOptionPane.showMessageDialog(null,"Invalid Email Details","Error",JOptionPane.WARNING_MESSAGE); break;
            }
        }
    }//GEN-LAST:event__sendButtonActionPerformed

    
    /*
    * Executes the check email command. Catches a MailException in the event the inbox cannot be opened and displays
    * a warning to the user.
    */
    private void _checkEmailButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__checkEmailButtonActionPerformed
        try
        {
            _checkMailCommand.Execute();
        }
        catch(MailException e)
        {
            if(e.getMessage() == "INBOX_ERROR")
            {
                JOptionPane.showMessageDialog(null,"Cannot Check Inbox.\nAre you sure you have an 'Encrypted' folder?","Error",JOptionPane.WARNING_MESSAGE);
            }
        } catch (Exception ex) {
            Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event__checkEmailButtonActionPerformed

    
    /**
     * Checks the event to see if a double click has taken place, if so the list index is sent to the email strategy 
     * in order to open the correct email.
     * @param evt 
     */
    private void _emailListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event__emailListMouseClicked
        
        if(evt.getClickCount() == 2)
        {    
            _emailStrategy.openSelectedEmail(_emailList.getSelectedIndex());
        }
        
    }//GEN-LAST:event__emailListMouseClicked

    private void _toAreaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__toAreaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event__toAreaActionPerformed

    /**
     * Usability function which clears the fields or text.
     * @param evt 
     */
    private void _clearFieldButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__clearFieldButtonActionPerformed
        _messageArea.setText("");
        _subjectArea.setText("");
        _fromField.setText("");
        _dateField.setText("");
        _toArea.setText("");
    }//GEN-LAST:event__clearFieldButtonActionPerformed

    
    /**
     * 
     * Gets the index of the selected email to be deleted and passes it via the email strategy. 
     * Catches a MailException in the event that of a deletion error and warns the user.
     */
    private void _deleteEmailButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__deleteEmailButtonActionPerformed
        try{
        _emailStrategy.deleteMessage(_emailList.getSelectedIndex());
        }
        catch (MailException e)
        {
            if(e.getMessage() == "DELETE_ERROR")
            {
               JOptionPane.showMessageDialog(null,"Please Select A Message To Delete.","Error",JOptionPane.WARNING_MESSAGE);
            }
            if(e.getMessage() == "FOLDER_ERROR")
            {
                JOptionPane.showMessageDialog(null,"No Inbox Found To Delete From.","Error",JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event__deleteEmailButtonActionPerformed

    /**
     * Shows the about message.
     * @param evt 
     */
    private void _aboutDialogMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event__aboutDialogMouseClicked
        JOptionPane.showMessageDialog(this, "Made by 13012555.\nThis software requires the user to\nhave created a folder entitled\nEncrypted in Outlook.");
    }//GEN-LAST:event__aboutDialogMouseClicked

    /**
     * Shows the file message.
     * @param evt 
     */
    private void _funButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event__funButtonMouseClicked
        JOptionPane.showMessageDialog(this, "Subscribe for additional features.");
    }//GEN-LAST:event__funButtonMouseClicked



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu _aboutDialog;
    private javax.swing.JButton _checkEmailButton;
    private javax.swing.JButton _clearFieldButton;
    private javax.swing.JTextField _connectionStatus;
    private javax.swing.JTextField _dateField;
    private javax.swing.JButton _decryptButton;
    private javax.swing.JButton _deleteEmailButton;
    private javax.swing.JMenu _emailAccountButton;
    private javax.swing.JList _emailList;
    private javax.swing.JButton _encryptButton;
    private javax.swing.JTextField _fromField;
    private javax.swing.JMenu _funButton;
    private javax.swing.JButton _generateKeyButton;
    private javax.swing.JTextField _keyNameField;
    private javax.swing.JComboBox _keySelector;
    private javax.swing.JButton _loadButton;
    private javax.swing.JTextArea _messageArea;
    private javax.swing.JButton _saveButton;
    private javax.swing.JButton _sendButton;
    private javax.swing.JTextField _subjectArea;
    private javax.swing.JTextField _toArea;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables

    /**
     * The view is given a message, as an IEmailObserver, to be displayed in the main text area.
     * @param message Message to be displayed
     */
    @Override
    public void UpdateMessage(String message) 
    {      
        if(message == null)
        {
            return;
        }
        else
        {
            _messageArea.setText(message);  
        }
    }

    
    /**
     * 
     * The view is given the latest list of emails that have been retrieved. The list is 
     * iterated through and the subject is added the the list to be displayed.
     * @param emails Current list of emails
     */
    @Override
    public void UpdateEmails(List<Message> emails) {
       
        _emailList.setModel(_list);  
        _list.clear();
        for(int i = 0; i < emails.size();i++)
        {
            try 
            {
                _list.addElement(emails.get(i).getSubject());
            } 
            catch (MessagingException ex) 
            {
                Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    
    /**
     *
     * If the connection to the email account is successful the check email, delete email and send
     * email buttons are enabled. This ensures the buttons cannot be clicked if there is not a valid connection
     * to the server.
     * @param connected Represents if the program is connected.
     */
    @Override
    public void UpdateStatus(boolean connected) 
    {       
        if(connected)
        {
            _connectionStatus.setText("Connected");
            _checkEmailButton.setEnabled(true);
            _deleteEmailButton.setEnabled(true);
            _sendButton.setEnabled(true);
        }
        else if(!connected)
        {
            _connectionStatus.setText("Disconnected");
            _checkEmailButton.setEnabled(false);
            _deleteEmailButton.setEnabled(false);
            _sendButton.setEnabled(false);
        }   
    }

    
    /**
     * 
     * This is called when an email has been retried from the list. It can then be displayed and decrypted.
     * @param message Email message to be displayed
     * @param subject Email subject
     * @param from Who sent the message
     * @param date When the message was sent
     */
    @Override
    public void UpdateSelectedEmail(String message, String subject, String from, String date) {
        
        _messageArea.setText(message);
        _subjectArea.setText(subject);
        _fromField.setText(from);
        _dateField.setText(date);
        
    }

    
    /**
     *
     * Provides the view with the name of the current key set. It is also used to confirm
     * that there is available keys and the encryption buttons can be enabled.
     * @param name - name of the current key set
     */
    @Override
    public void UpdateKeySetName(String name) 
    {
       _encryptButton.setEnabled(true);
       _keySelector.setEnabled(true);
       _decryptButton.setEnabled(true);
       _saveButton.setEnabled(true);
       _keyNameField.setText(name);
    }

    /**
     * The view is passed a boolean denoting if the email has been sent. The user
     * is then informed via a dialog.
     * @param isSent 
     */
    @Override
    public void UpdateSendStatus(boolean isSent)
    {
        if(isSent)
        {
             JOptionPane.showMessageDialog(null,"Message Sent.");
        }
        else if(!isSent)
        {
            JOptionPane.showMessageDialog(null,"Message Not Sent.","Error",JOptionPane.WARNING_MESSAGE);
        }
    }
    
}
